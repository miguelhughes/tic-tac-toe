{"version":3,"sources":["index.js"],"names":["Square","highLight","onClick","value","className","Board","i","this","props","squaresToHighLight","indexOf","key","squares","rows","j","push","renderSquare","React","Component","Game","state","stepNumber","history","Array","fill","filledSquare","xIsNext","slice","length","calculateWinner","nextPlayer","setState","concat","step","isXNext","status","current","winResult","winner","isBoardFull","handleClick","combination","TimeTravel","currentStep","jumpTo","winningLines","a","b","c","ascending","isAscending","moves","map","move","HistoryEntry","square","xMoved","isCurrent","reverse","direction","sort","buttonText","extraText","col","row","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.581acb89.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport PropTypes from \"prop-types\";\n\n// Square.propTypes = {\n//   highLight: PropTypes.bool,\n//   onClick: PropTypes.func,\n//   value: PropTypes.string,\n// };\n\nfunction Square({ highLight, onClick, value }) {\n  let className = \"square\" + (highLight ? \" winner\" : \"\");\n\n  return (\n    <button className={className} onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let highLight;\n    if (\n      this.props.squaresToHighLight != null &&\n      this.props.squaresToHighLight.indexOf(i) !== -1\n    )\n      highLight = true;\n    else highLight = false;\n\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highLight={highLight}\n      />\n    );\n  }\n\n  render() {\n    let highLight = this.props.squaresToHighLight;\n    if (!highLight) highLight = [];\n\n    let rows = [];\n    for (var i = 0; i < 3; i++) {\n      let squares = [];\n      for (var j = 0; j < 3; j++) {\n        squares.push(this.renderSquare(i * 3 + j));\n      }\n      rows.push(\n        <div className=\"board-row\" key={i}>\n          {squares}\n        </div>\n      );\n    }\n    return <div>{rows}</div>;\n  }\n}\n\nBoard.propTypes = {\n  squaresToHighLight: PropTypes.arrayOf(PropTypes.number),\n  squares: squaresCountValidator,\n  // squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClick: PropTypes.func,\n};\n\nfunction squaresCountValidator(props, propName) {\n  if (props[propName].length !== 9) {\n    return new Error(\n      \"9 squares must be passed in for the board to render properly\"\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepNumber: 0,\n      history: [\n        {\n          squares: Array(9).fill(null),\n          filledSquare: null,\n        },\n      ],\n      xIsNext: true,\n    };\n  }\n\n  nextPlayer() {\n    return this.state.xIsNext ? \"X\" : \"O\";\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) return;\n\n    squares[i] = this.nextPlayer();\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          filledSquare: i,\n        },\n      ]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      xIsNext: isXNext(step),\n      stepNumber: step,\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winResult = this.calculateWinner(current.squares);\n\n    let status;\n\n    if (winResult) {\n      status = winResult.winner + \" has won!\";\n    } else {\n      if (this.isBoardFull(current.squares)) status = \"Game over - draw\";\n      else status = \"Next player: \" + this.nextPlayer();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            squaresToHighLight={winResult ? winResult.combination : null}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <TimeTravel\n            history={history}\n            currentStep={this.state.stepNumber}\n            onClick={(i) => this.jumpTo(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  calculateWinner(squares) {\n    const winningLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < winningLines.length; i++) {\n      const [a, b, c] = winningLines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        const result = {\n          winner: squares[a],\n          combination: winningLines[i],\n        };\n        return result;\n      }\n    }\n    return null;\n  }\n\n  isBoardFull(squares) {\n    for (var i = 0; i < squares.length; i++) {\n      if (!squares[i]) return false;\n    }\n    return true;\n  }\n}\n\nclass TimeTravel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ascending: true,\n    };\n  }\n\n  sort(isAscending) {\n    this.setState({\n      ascending: isAscending,\n    });\n  }\n\n  render() {\n    let history = this.props.history;\n\n    let moves = history.map((step, move) => {\n      return (\n        <HistoryEntry\n          key={move}\n          move={move}\n          square={step.filledSquare}\n          xMoved={!isXNext(move)}\n          isCurrent={this.props.currentStep === move}\n          onClick={() => this.props.onClick(move)}\n        />\n      );\n    });\n\n    if (!this.state.ascending) {\n      moves = moves.reverse();\n    }\n\n    const direction = this.state.ascending ? \"↓\" : \"↑\";\n\n    return (\n      <div>\n        <button onClick={() => this.sort(!this.state.ascending)}>\n          {direction}\n        </button>\n        {moves}\n      </div>\n    );\n  }\n}\n\nTimeTravel.propTypes = {\n  history: PropTypes.arrayOf(\n    PropTypes.shape({\n      filledSquare: PropTypes.number,\n    })\n  ).isRequired,\n  currentStep: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n};\n\nfunction HistoryEntry(props) {\n  let buttonText;\n  let extraText = null;\n  if (props.move === 0) {\n    buttonText = \"go to game start\";\n  } else {\n    buttonText = \"go to move #\" + props.move;\n    let col = (props.square % 3) + 1;\n    let row = Math.floor(props.square / 3) + 1;\n    extraText =\n      (props.xMoved ? \"X\" : \"O\") + \" added on (\" + col + \", \" + row + \")\";\n  }\n\n  return (\n    <li className={props.isCurrent ? \"current\" : \"\"}>\n      <button onClick={props.onClick}>{buttonText}</button>\n      {extraText}\n    </li>\n  );\n}\n\nHistoryEntry.propTypes = {\n  move: PropTypes.number.isRequired,\n  square: PropTypes.number,\n  xMoved: PropTypes.bool.isRequired,\n  isCurrent: PropTypes.bool.isRequired,\n  onClick: PropTypes.func,\n};\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction isXNext(step) {\n  return step % 2 === 0;\n}\n"],"sourceRoot":""}